<% if (token) { %>
<html>
  <%- include('../../partials/admin_navbar.ejs') %>
  </style>
  <link rel="stylesheet" type="text/css" href="https://cdn.datatables.net/1.11.5/css/jquery.dataTables.css">
<!-- Model for Add new user -->
<div class="modal fade" id="addusermodel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog">
      <div class="modal-content">
        <div class="modal-header">
          <h1 class="modal-title fs-5" id="exampleModalLabel">Add User</h1>
          <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
        </div>
        <div class="modal-body">
          <div class="mb-3">
            <label for="name" class="form-label">Name</label>
            <input
              type="text"
              class="form-control"
              id="name"
              name="name"
              onkeydown="restrictInputName(event)"
              placeholder="Enter the name"
              onkeyup="validateName()"
              maxlength="20"
              onblur="validateName()"
            />
            <div id="nameError" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="email" class="form-label">Email</label>
            <input
              type="email"
              class="form-control"
              id="email"
              name="email"
              onkeyup="validateEmail()"
              onblur="validateEmail()"
              placeholder="Enter the email"
            />
            <div id="emailError" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="mobile" class="form-label">Mobile</label>
            <input
              type="text"
              class="form-control"
              id="mobile"
              name="mobile"
              onkeyup="validateMobile()"
              onkeydown="restrictInput(event)"
              onblur="validateMobile()"
              maxlength="10"
              placeholder="Enter the mobile"
            />
            <div id="mobileError" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="gender" class="form-label">Select Gender:</label
            ><br />
            <input
              class="form-check-input"
              type="radio"
              value="male"
              name="gender"
              id="male"
              onchange="validateGender()"
            />
            <label class="form-check-label" for="male">Male</label>
            <input
              class="form-check-input"
              type="radio"
              value="female"
              name="gender"
              id="female"
              onchange="validateGender()"
            />
            <label class="form-check-label" for="female">Female</label>
            <div id="genderError" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="address" class="form-label">Address</label>
            <input
              type="text"
              class="form-control"
              id="address"
              name="address"
              placeholder="Enter the address"
              onchange="validateAddress()"
              onkeypress="validateAddress()"
            />
            <div id="addressError" class="text-danger"></div>
          </div>
          <div class="mb-3">
            <label for="userprofile" class="form-label">Select user  profile picture :</label>
            <input
              type="file"
              class="form-control"
              id="userprofile"
              name="userprofile"
            />
            <div id="profilePicture" class="text-danger"></div>
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
          <button type="button" class="btn btn-primary" onclick="adduser(event)">Add</button>
        </div>
      </div>
    </div>
</div>

<div class="modal fade" id="updateusermodel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h1 class="modal-title fs-5" id="exampleModalLabel">Edit User</h1>
        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
      </div>
      <div class="modal-body">
        <form action="">
        <input type="hidden" id="userId"/>
        <div class="mb-3">
          <label for="name" class="form-label">Name</label>
          <input
            type="text"
            class="form-control"
            id="name1"
            name="name1"
            onkeydown="restrictInputName(event)"
            placeholder="Enter the name"
            onkeyup="validateName1()"
            maxlength="20"
            onblur="validateName1()"
          />
          <div id="nameError1" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="email1" class="form-label">Email</label>
          <input
            type="email"
            class="form-control"
            id="email1"
            name="email1"
            onkeyup="validateEmail1()"
            onblur="validateEmail1()"
            placeholder="Enter the email"
            disabled
          />
          <div id="emailError1" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="mobile" class="form-label">Mobile</label>
          <input
            type="text"
            class="form-control"
            id="mobile1"
            name="mobile1"
            onkeyup="validateMobile1()"
            onkeydown="restrictInput(event)"
            onblur="validateMobile1()"
            maxlength="10"
            placeholder="Enter the mobile"
          />
          <div id="mobileError1" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="gender" class="form-label">Select Gender:</label
          ><br />
          <input
            class="form-check-input"
            type="radio"
            value="male"
            name="gender1"
            id="male1"
            onchange="validateGender()"
          />
          <label class="form-check-label" for="male">Male</label>
          <input
            class="form-check-input"
            type="radio"
            value="female"
            name="gender1"
            id="female1"
            onchange="validateGender()"
          />
          <label class="form-check-label" for="female">Female</label>
          <div id="genderError" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="address" class="form-label">Address</label>
          <input
            type="text"
            class="form-control"
            id="address1"
            name="address1"
            placeholder="Enter the address"
            onchange="validateAddress1()"
            onkeypress="validateAddress1()"
          />
          <div id="addressError1" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="password" class="form-label">Password</label>
          <div class="input-group">
              <input
                  type="password"
                  class="form-control"
                  id="password"
                  name="password"
                  onchange="validatePassword()"
                  onkeyup="validatePassword()"
                  onkeydown="validatePassword()"
                  placeholder="enter the password"
              />
              <button class="btn btn-outline-secondary" type="button" id="togglePasswordButton" onclick="togglePasswordVisibility()">
                  Show
              </button>
          </div>
          <div id="passwordError" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <label for="userprofile" class="form-label">Select user  profile picture :</label>
          <input
            type="file"
            class="form-control"
            id="userprofile1"
            name="userprofile1"
          />
          <div id="profilePictureError1" class="text-danger"></div>
        </div>
        <div class="mb-3">
          <center>
            <button class="btn btn-dark" onclick="handleUpdate(event)">Update</button>
            <button class="btn btn-danger" onclick="handleModelClode()">Close</button>
          </center>
        </div>
      </form>
      </div>
    </div>
  </div>
</div>

  <main id="main" class="main">
    <section class="section dashboard">
      <div class="row">
        <div class="col-md-12">
            <h3 class='text-center text-light p-1 rounded' style="background-color: #0e2238;">Add / edit / delete &nbsp;User</h3>
        </div>
        <div class="col-md-12">
            <button class='btn text-light float-end' style="background-color:#0e2238;" data-bs-toggle="modal" data-bs-target="#addusermodel">+ Add new user</button> 
        </div>
        <div class="col-md-12 mt-2" id="root">

        </div>
      </div>
    </section>

  </main>
  <!-- End #main -->
<div>
  <!-- Vendor JS Files -->
  <script src="assets/vendor/apexcharts/apexcharts.min.js"></script>
  <script src="assets/vendor/bootstrap/js/bootstrap.bundle.min.js"></script>
  <script src="assets/vendor/chart.js/chart.umd.js"></script>
  <script src="assets/vendor/echarts/echarts.min.js"></script>
  <script src="assets/vendor/quill/quill.min.js"></script>
  <script src="assets/vendor/simple-datatables/simple-datatables.js"></script>
  <script src="assets/vendor/tinymce/tinymce.min.js"></script>
  <script src="assets/vendor/php-email-form/validate.js"></script>
  <script src="assets/js/main.js"></script>
  <script src="https://cdn.datatables.net/1.11.5/js/jquery.dataTables.js"></script>
</div>

<script>
    function handleModelClode(){
      location.reload();
    }
  
    $(document).ready(async()=>{
      const token = localStorage.getItem("token");  
      let adduser = `<table class='table-responsive' id='userTable'><thead><th>No</th><th>Name</th><th>Email</th><th>Mobile</th><th>gender</th><th>address</th><th>Password</th><th>Picture</th><th>Update</th><th>Delete</th></thead><tbody>`

        try {
            const response = await fetch('/displayusers', {
                method: 'GET',
                headers: {
                    'Content-Type': 'application/json',
                    'Authorization': `Bearer ${token}`
                },
            });

            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            const data = await response.json();

            let number = 1;

            data.map((item)=>{

                const update_data = {
                    id: item._id,
                    name:item.name,
                    email: item.email,
                    mobile:item.mobile,
                    gender:item.gender,
                    address:item.address,
                    password:item.password,
                    userProfile:item.userProfile
                };

                adduser += `<tr><td class='text-center'>${number++}</td><td>${item.name}</td><td>${item.email}</td><td>${item.mobile}</td><td>${item.gender}</td><td>${item.address}</td><td>${item.password}</td><td><img src="${item.userProfile}" height="60px" width="80px"></td>
                  <td class='text-center'>
                  <button class='btn btn-dark'><i class="bi bi-pencil-square" onclick='updateRecord(${JSON.stringify(update_data)})' data-bs-toggle="modal" data-bs-target="#updateusermodel"></i></button>
                  </td>
                  <td class='text-center'>
                  <button class='btn btn-dark' onclick="deleteUser('${item._id}')"><i class="bi bi-trash3-fill"></i></button>
                  </td></tr>`
            })

          }catch(error){
            console.log("Error from the find the admin profile picture : ",error);
          }
      
      adduser += `</tbody></table>`;
      $("#root").html(adduser);
      $('#userTable').DataTable();
    })

    function updateRecord(data){
      document.getElementById('userId').value = data.id
      document.getElementById('name1').value = data.name;
      document.getElementById('email1').value = data.email;
      document.getElementById('mobile1').value = data.mobile;
      document.getElementById(`${data.gender}1`).setAttribute('checked', 'true');
      document.getElementById('address1').value = data.address;
      document.getElementById('password').value = data.password;
    }

    function togglePasswordVisibility() {
        const passwordField = document.getElementById('password');
        const togglePasswordButton = document.getElementById('togglePasswordButton');
        
        if (passwordField.type === 'password') {
            passwordField.type = 'text';
            togglePasswordButton.textContent = 'Hide';
        } else {
            passwordField.type = 'password';
            togglePasswordButton.textContent = 'Show';
        }
      }


    function deleteUser(id){
      try {
            Swal.fire({
              title: 'Are you sure?',
              text: "You won't be able to revert this!",
              icon: 'warning',
              showCancelButton: true,
              confirmButtonColor: '#3085d6',
              cancelButtonColor: '#d33',
              confirmButtonText: 'Yes, delete it!'
            }).then(async (result) => {
                if (result.isConfirmed) {
                  const response = await fetch(`/deleteuser?id=${id}`, {
                  method: 'GET',
                  headers: {
                      'Content-Type': 'application/json',
                  },
              });

              if (!response.ok) {
                  throw new Error('Network response was not ok');
              }
              const data = await response.json();

              if(data.success){
                return Swal.fire({
                  title: "Great!",
                  text: "User removed successfully!",
                  icon: "success"
              }).then(function (result) {
                  if (result.isConfirmed) {
                      location.reload();
                  }
              });
            }}
          })
        }catch(error){
          console.log("Error from deleteUser : ",error);
        }

    }

    async function adduser(event){
      event.preventDefault();
      const name = document.getElementById("name").value;
      const email = document.getElementById("email").value;
      const mobile = document.getElementById("mobile").value;
      let gender;
      if (document.getElementById("male").checked) {
        gender = "male";
      } else if (document.getElementById("female").checked) {
        gender = "female";
      }
      const address = document.getElementById("address").value;
      var fileInput = document.getElementById('userprofile');
      const file = fileInput.files[0];
      console.log(file);

      if(name == "" || email == "" || mobile == "" || gender == ""  || address == ""){
            return Swal.fire({
                title: "Oops...!",
                text: "All fields are required!",
                icon: "error"
            });
      }

      const apiData = new FormData();
      apiData.append('name',name);
      apiData.append('email', email);
      apiData.append('mobile', mobile);
      apiData.append('gender', gender);
      apiData.append('address', address);
      apiData.append('userProfile',file);
      const token = localStorage.getItem('token');

      try {
        const responseAdduser = await fetch('/adduser', {
          method: 'POST',
          headers: {
              'Authorization': `Bearer ${token}`
          },
          body: apiData,
        });

        if (!responseAdduser.ok) {
          throw new Error('Failed to add user');
        }

        const responseData = await responseAdduser.json();
        if(responseData.success){
          Swal.fire({
                title: "Great !",
                text: "User is added succesfully!",
                icon: "success"
          }).then((result)=>{
            if (result.isConfirmed) {
                location.reload();
            }
          })
        }

      } catch (error) {
        console.error("Error from the responseAdduser >> ",error)
      }

    }

    // VALIDATION FOR ADD NEW USER

    function validateName() {
        const name = document.getElementById("name").value;
        const nameError = document.getElementById("nameError");

        if (name === "") {
          nameError.innerHTML = "Name is Required.";
          document.getElementById('name').style.border = "2px solid red";
        } else if (name.length < 3 || !/^[a-zA-Z]+$/.test(name)) {
          nameError.textContent =
            "Name must be at least 3 characters long and contain only letters.";
            document.getElementById("name").style.border = "2px solid red";
        } else {
          nameError.textContent = "";
          document.getElementById("name").style.border = "";
        }
    }

    function validateEmail() {
        const emailInput = document.getElementById("email");
        const emailError = document.getElementById("emailError");
        const email = emailInput.value.trim();

        if (email === "") {
            emailError.textContent = "Email is required.";
            document.getElementById('email').style.border = "2px solid red";
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            emailError.textContent = "Invalid email format.";
            document.getElementById('email').style.border = "2px solid red";
        } else {
            emailError.textContent = "";
            document.getElementById('email').style.border = "";
            try {
               fetch(`/checkavl?email=${encodeURIComponent(email)}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          emailError.textContent = "This email address is already in use.";
                          emailInput.style.border = "2px solid red";
                       } else {
                          emailError.textContent = ""
                          emailInput.style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

    function validateMobile() {
        const mobile = document.getElementById("mobile").value;
        const mobileError = document.getElementById("mobileError");

        if (mobile == "") {
          mobileError.textContent = "Mobile is required";
          document.getElementById('mobile').style.border = "2px solid red";
        } else if (!/^\d{10}$/.test(mobile)) {
          mobileError.textContent = "Mobile must be 10 digits long";
          document.getElementById('mobile').style.border = "2px solid red";
        } else {
              mobileError.textContent = ""
              document.getElementById('mobile').style.border = "";
          try {
               fetch(`/checkavl?mobile=${encodeURIComponent(mobile)}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          mobileError.textContent = "This mobile is already in use.";
                          document.getElementById('mobile').style.border = "2px solid red";
                       } else {
                          mobileError.textContent = ""
                          document.getElementById('mobile').style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

    function validateGender() {
        const male = document.getElementById("male");
        const female = document.getElementById("female");
        const genderError = document.getElementById("genderError");

        if (!male.checked && !female.checked) {
          genderError.textContent = "Please select gender.";
          document.getElementById('male').style.border = "2px solid red";
          document.getElementById('female').style.border = "2px solid red";
        } else {
          genderError.textContent = "";
          document.getElementById('male').style.border = "";
          document.getElementById('female').style.border = "";
        }
      }

    function validateAddress() {
        const address = document.getElementById("address").value;
        const addressError = document.getElementById("addressError");

        if (address.trim() === "") {
          addressError.textContent = "Address is required.";
          document.getElementById('address').style.border = "2px solid red";
        } else if (/^\d+$/.test(address)) {
          addressError.textContent = "Address cannot contain only numbers.";
          document.getElementById('address').style.border = "2px solid red";
        }
         else {
          addressError.textContent = "";
          document.getElementById('address').style.border = "";
        }
    }
   
    function restrictInput(event) {
      const keyPressed = event.key;

        // Check if the key pressed is a digit (0-9) or the backspace key
      if (
        !/^\d$/.test(keyPressed) &&
        keyPressed !== "Backspace" &&
        keyPressed !== "ArrowLeft" &&
        keyPressed !== "ArrowRight"
      ) {
        event.preventDefault(); // Prevent non-numeric characters from being entered
      }
    }

    function restrictInputName(event){
        const keyPressed = event.key;
        if(!/^[a-zA-Z]+$/.test(keyPressed) && keyPressed !== "ArrowLeft" && keyPressed !== "ArrowRight" )
        {
          event.preventDefault();
        }
      }

    // VALIDATION FOR ADD NEW USER
    
    function validateName1() {
        const name = document.getElementById("name1").value;
        const nameError = document.getElementById("nameError1");

        if (name === "") {
          nameError.innerHTML = "Name is Required.";
          document.getElementById('name1').style.border = "2px solid red";
        } else if (name.length < 3 || !/^[a-zA-Z]+$/.test(name)) {
          nameError.textContent =
            "Name must be at least 3 characters long and contain only letters.";
            document.getElementById("name1").style.border = "2px solid red";
        } else {
          nameError.textContent = "";
          document.getElementById("name1").style.border = "";
        }
    }

    function validateEmail1() {
        const emailInput = document.getElementById("email1");
        const emailError = document.getElementById("emailError1");
        const email = emailInput.value.trim();

        if (email === "") {
            emailError.textContent = "Email is required.";
            document.getElementById('email1').style.border = "2px solid red";
        } else if (!/\S+@\S+\.\S+/.test(email)) {
            emailError.textContent = "Invalid email format.";
            document.getElementById('email1').style.border = "2px solid red";
        } else {
            const id = document.getElementById('userId').value;
            try {
               fetch(`/checkavl?email=${encodeURIComponent(email)}&id=${id}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          emailError.textContent = "This email address is already in use.";
                          emailInput.style.border = "2px solid red";
                       } else {
                          emailError.textContent = ""
                          emailInput.style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

    function validateMobile1() {
        const mobile = document.getElementById("mobile1").value;
        const mobileError = document.getElementById("mobileError1");

        if (mobile == "") {
          mobileError.textContent = "Mobile is required";
          document.getElementById('mobile1').style.border = "2px solid red";
        } else if (!/^\d{10}$/.test(mobile)) {
          mobileError.textContent = "Mobile must be 10 digits long";
          document.getElementById('mobile1').style.border = "2px solid red";
        } else {
              const id = document.getElementById('userId').value;
          try {
               fetch(`/checkavl?mobile=${encodeURIComponent(mobile)}&id=${id}`).then((response) => {
                   response.json().then((data) => {
                       if (data.available) {
                          mobileError.textContent = "This mobile is already in use.";
                          document.getElementById('mobile1').style.border = "2px solid red";
                       } else {
                          mobileError.textContent = ""
                          document.getElementById('mobile1').style.border = "";
                       }
                   })
                }).catch((err) => console.log(err));
            } catch (error) {
                console.error('Error checking email availability:', error);
            }
        }
      }

    function validateAddress1() {
      const address = document.getElementById("address1").value;
      const addressError = document.getElementById("addressError1");

      if (address.trim() === "") {
        addressError.textContent = "Address is required.";
        document.getElementById('address1').style.border = "2px solid red";
      } else if (/^\d+$/.test(address)) {
        addressError.textContent = "Address cannot contain only numbers.";
        document.getElementById('address1').style.border = "2px solid red";
      }
      else {
        addressError.textContent = "";
        document.getElementById('address1').style.border = "";
      }
    }

    function validatePassword() {
        const password = document.getElementById("password").value;
        const passwordError = document.getElementById("passwordError");

        if (password == "") {
          passwordError.textContent = "Password is required";
          document.getElementById('password').style.border = "2px solid red";
        } else if (!/^(?=.*\d)(?=.*[a-zA-Z]).{8,}$/.test(password)) {
          passwordError.textContent =
            "Password must be at least 8 characters long and contain a mix of letters and digits.";
          document.getElementById('password').style.border = "2px solid red";
        } else {
          passwordError.textContent = "";
          document.getElementById('password').style.border = "";
        }
      }

    // update data 

    async function handleUpdate(event){
      event.preventDefault();

      const id = document.getElementById('userId').value;
      const name = document.getElementById('name1').value;
      const email = document.getElementById('email1').value;
      const mobile = document.getElementById('mobile1').value;
      const address  = document.getElementById('address1').value;
      const password = document.getElementById('password').value;
      const userProfile =  document.getElementById('userprofile1');
      const file = userProfile.files[0];
      let gender;
      if (document.getElementById("male1").checked) {
        gender = "male";
      } else if (document.getElementById("female1").checked) {
        gender = "female";
      }

      if(name == "" || email == "" || mobile == "" || address == "" || password == "" ||  !gender ){
        return Swal.fire({
          icon: 'error',
          title: 'Oops...',
          text: 'Please fill all fields!',
        })
      }

      const apiData = new FormData();
      if(file===undefined){
        apiData.append('name',name);
        apiData.append('email', email);
        apiData.append('mobile', mobile);
        apiData.append('gender', gender);
        apiData.append('address', address);
        apiData.append('password', password);
      }else{
        apiData.append('name',name);
        apiData.append('email', email);
        apiData.append('mobile', mobile);
        apiData.append('gender', gender);
        apiData.append('address', address);
        apiData.append('password', password);
        apiData.append('userProfile',file);
      }

      try {
        const responseAdduser = await fetch(`/updateuser/${id}`, {
          method: 'POST',
          body: apiData,
        });

        if (!responseAdduser.ok) {
          throw new Error('Failed to add user');
        }

        const responseData = await responseAdduser.json();
        if(responseData.success){
          Swal.fire({
                title: "Great !",
                text: "User is updated succesfully!",
                icon: "success"
          }).then((result)=>{
            if (result.isConfirmed) {
                location.reload();
            }
          })
        }

      } catch (error) {
        console.error("Error from the responseAdduser >> ",error)
      }

      
    }

</script>

</body>
</html>

<% } else { %>

  <% res.redirect('/adminLogin'); %>

<% } %>
