<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=width=device-width, initial-scale=1.0">
    <title>Product Display</title>
    <%- include('../../partials/link.ejs') %>
    <style>
        /* Styles for the loader */
        #loader {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(255, 255, 255, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 9999;
        }
        #loader img {
            width: 100px; /* Adjust the size as needed */
            height: 100px; /* Adjust the size as needed */
        }
        body{
            font-family: 'Times New Roman', Times, serif;
        }
        .custom-toast {
          background-color: #4CAF50;
          color: white;
          padding: 16px;
          border-radius: 8px;
          box-shadow: 0px 2px 10px rgba(0, 0, 0, 0.2);
          margin-top: 50px;
        }
        ::-webkit-scrollbar {
          display: none; /* Hide the scrollbar */
        }
    </style>
</head>
<body style="margin-top: 100px;">
    <div id="loader">
        <img src="Spinner.gif" alt="Loading...">
    </div>
    <%- include('../../partials/navbar.ejs') %>

<div class="container mt-5">
  <div class="row mb-4 bg-dark p-2 rounded">
    <div class="col-md-12 d-flex">
      <div class="col-md-6 mt-2">
        <input type="text" id="searchInput" class="form-control" placeholder="Search products...">
      </div>
      <div class="col-md-6 mt-2 mx-2">
        <select id="categorySelect" class="form-control">
          <option value="">All Categories</option>
        </select>
      </div>
    </div>
    <div class="col-md-12 d-flex">
      <div class="col-md-6 d-flex mt-2">
        <input type="number" id="minPrice" class="form-control" placeholder="Min Price">
        <input type="number" id="maxPrice" class="form-control mx-2 " placeholder="Max Price">
      </div>
      <div class="col-md-6 mx-2 mt-2">
        <select id="sortSelect" class="form-control">
          <option value="" disabled selected>Sort product :-</option>
          <option value="asc">Sort by Newest</option>
          <option value="desc">Sort by Oldest</option>
        </select>
      </div>
    </div>
  </div>
  <div id="productCards" class="row" style="min-height: 1000px;"></div>
  <nav aria-label="Page navigation">
    <ul id="pagination" class="pagination"></ul>
  </nav>
</div>

<script>
  window.addEventListener('load', function() {
    setTimeout(function() {
        document.getElementById('loader').style.display = 'none';
    }, 2000);
  });

  async function fetchProducts() {
    try {
        const token = localStorage.getItem('token');
        const response = await fetch('/getproduct', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${token}`
            },
        });
        const data = await response.json();
        return data;
    } catch (error) {
        console.error('Error fetching products:', error);
        return [];
    }
  }

  async function fetchCategories() {
    try {
        const response = await fetch('/getcategory', {
            method: 'GET',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': `Bearer ${localStorage.getItem('token')}`
            },
        });
        const data = await response.json();
        return data.data;
    } catch (error) {
        console.error('Error fetching categories:', error);
        return [];
    }
  }

  async function displayProducts(products) {
    const productCards = document.getElementById('productCards');
    productCards.innerHTML = '';
    const token = localStorage.getItem('token');
    const resProductCheck = await fetch("/getcartitem", {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${token}`
      }
    });

    const resProductCheckJSON = await resProductCheck.json();
    const ProductsID = resProductCheckJSON.data.map(item => ({
      pid: item.productId._id,
      cartId: item._id
    }));

    if(products.length == 0){
      productCards.innerHTML = `<p class="alert alert-primary text-center" role="alert" style='height:55px'>No products found!</p>`;
      return;
    }

    products.forEach(product => {
      const isInCart = ProductsID.find(item => item.pid === product._id);
      let card = `
        <div class="col-md-3 mb-4">
          <div class="card shadow-lg">
            <img src="${product.product_picture}" class="card-img-top" alt="${product.productName}" height="200px" width="169px">
            <div class="card-body">
              <h5 class="card-title border border-light bg-light text-center">${product.productName}</h5>
              <p class="card-text">Discount: ${product.discount}%</p>
              <p class="card-text"><b>Effective Price:</b> <del>${product.price}</del>&nbsp;&nbsp;<ins>â‚¹${product.price - (product.price * product.discount) / 100}</ins></p>
              <p class="card-text">Available Quantity: <span class='text-danger'>${product.quantity}</span></p>
              <div class="d-grid gap-2">
      `;

      if (product.quantity < 1) {
        card += `
          <div id='${product._id}'>
            <button class="btn btn-primary" style='width:100%' type="button"><i class="bi bi-bell-fill"></i> Notify me</button>
          </div>`;
      } else {
        if (isInCart) {
          card += `
            <div id='${product._id}'>
              <button onclick='removeToCart(${JSON.stringify({ buttonId: product._id, cartId: isInCart.cartId, item: product })})' class='btn btn-warning' style='width:100%'>Remove from cart</button>
            </div>`;
        } else {
          card += `
            <div id='${product._id}'>
              <button class="btn btn-outline-success" style='width:100%' onclick='addToCart(${JSON.stringify(product)})' type="button">Add to cart</button>
            </div>`;
        }
      }

      card += `
              </div>
            </div>
          </div>
        </div>
      `;

      productCards.innerHTML += card;
    });
  }

  async function addToCart(item){
    const formData = new FormData();
    formData.append('productName',item.productName);
    formData.append('categoryName',item.categoryName);
    formData.append('price',item.price - (item.price * item.discount)/100);
    formData.append('quantity',1);
    formData.append('subtotal',item.price - (item.price * item.discount)/100);
    formData.append('product_picture',item.product_picture);
    formData.append('productId',item._id);

    const token = localStorage.getItem('token');

    const response = await fetch('/addcart', {
        method: 'POST',
        headers: {
            'Authorization': `Bearer ${token}`
        },
        body:formData
    });

    if (!response.ok) {
        throw new Error('Network response was not ok');
    }
    const data = await response.json();

    if(data.success){
      $("#numberCart").text(data.numberCart);
      $(`#${item._id}`).html('');
      const cartId = data.cartId;
      $(`#${item._id}`).html(`<button onclick='removeToCart(${JSON.stringify({buttonId:item._id,cartId:cartId,item:item})})' class='btn btn-warning' style='width:100%'>Remove from cart</button>`);
      
      Toastify({
        text: `${item.productName} added to cart!`,
        duration: 2000,
        gravity: "top",
        position: 'right',
        className: "custom-toast",
        stopOnFocus: true
      }).showToast();
    }
  }

  async function removeToCart(item) {
    const token = localStorage.getItem('token');

    const resRemoveCart = await fetch(`/removecart?cartId=${item.cartId}`, {
      method: 'DELETE',
      headers: {
        'Authorization': `Bearer ${token}`
      },
    });

    const resRemoveCartJson = await resRemoveCart.json();

    if (resRemoveCartJson.success) {
      $("#numberCart").text(resRemoveCartJson.numberCart);

      Toastify({
        text: `${item.item.productName} removed from cart!`,
        duration: 2000,
        gravity: "top",
        position: 'right',
        className: "custom-toast",
        stopOnFocus: true
      }).showToast();

      $(`#${item.buttonId}`).html('');
      $(`#${item.buttonId}`).html(`<button class="btn btn-outline-success" style='width:100%' onclick='addToCart(${JSON.stringify(item.item)})' type="button">Add to cart</button>`);
    }
  }

  function handlePagination(products, currentPage = 1, itemsPerPage = 8) {
    const paginationElement = document.getElementById('pagination');
    paginationElement.innerHTML = '';

    const totalPages = Math.ceil(products.length / itemsPerPage);

    for (let i = 1; i <= totalPages; i++) {
      const li = document.createElement('li');
      li.classList.add('page-item');
      const link = document.createElement('a');
      link.classList.add('page-link');
      link.href = '#';
      link.textContent = i;
      if (i === currentPage) {
        li.classList.add('active');
      }
      link.addEventListener('click', () => {
        handlePagination(products, i);
      });
      li.appendChild(link);
      paginationElement.appendChild(li);
    }

    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = Math.min(startIndex + itemsPerPage, products.length);
    const displayedProducts = products.slice(startIndex, endIndex);
    displayProducts(displayedProducts);
  }

  function filterProducts(products) {
    const searchInput = document.getElementById('searchInput').value.toLowerCase();
    const selectedCategory = document.getElementById('categorySelect').value;
    const minPrice = parseFloat(document.getElementById('minPrice').value) || 0;
    const maxPrice = parseFloat(document.getElementById('maxPrice').value) || Infinity;
    const sortOrder = document.getElementById('sortSelect').value;

    let filteredProducts = products.filter(product => {
      const matchesSearch = product.productName.toLowerCase().includes(searchInput);
      const matchesCategory = selectedCategory === "" || product.categoryName === selectedCategory;
      const matchesPrice = product.price - (product.price * product.discount) / 100 >= minPrice &&
                          product.price - (product.price * product.discount) / 100 <= maxPrice;
      return matchesSearch && matchesCategory && matchesPrice;
    });

    filteredProducts.sort((a, b) => {
      if (sortOrder === 'asc') {
        return new Date(b.createdAt) - new Date(a.createdAt);
      } else {
        return new Date(a.createdAt) - new Date(b.createdAt);
      }
    });

    return filteredProducts;
  }

  async function init() {
    const productsData = await fetchProducts();
    const products = productsData.data;
    const categoriesData = await fetchCategories();
    const categories = categoriesData;

    const categorySelect = document.getElementById('categorySelect');
    categories.forEach(category => {
      const option = document.createElement('option');
      option.value = category.categoryName;
      option.textContent = category.categoryName;
      categorySelect.appendChild(option);
    });

    handlePagination(products);

    document.getElementById('searchInput').addEventListener('input', () => {
      const filteredProducts = filterProducts(products);
      handlePagination(filteredProducts);
    });

    document.getElementById('categorySelect').addEventListener('change', () => {
      const filteredProducts = filterProducts(products);
      handlePagination(filteredProducts);
    });

    document.getElementById('minPrice').addEventListener('input', () => {
      const filteredProducts = filterProducts(products);
      handlePagination(filteredProducts);
    });

    document.getElementById('maxPrice').addEventListener('input', () => {
      const filteredProducts = filterProducts(products);
      handlePagination(filteredProducts);
    });

    document.getElementById('sortSelect').addEventListener('change', () => {
      const filteredProducts = filterProducts(products);
      handlePagination(filteredProducts);
    });
  }

  init();
</script>

</body>
</html>
